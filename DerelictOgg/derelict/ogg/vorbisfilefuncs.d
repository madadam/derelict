/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.ogg.vorbisfilefuncs;

private
{
    import derelict.util.compat;
    import derelict.ogg.oggtypes;
    import derelict.ogg.vorbistypes;
    import derelict.ogg.vorbisfiletypes;
    
    version(Tango)
    	import tango.stdc.stdio : FILE, fclose, fread, ftell, fseek;
    else
    	import std.c.stdio : FILE, fclose, fread, ftell, fseek;
}

extern(C)
{
    mixin(gsharedString!() ~
    "
    int function(OggVorbis_File* vf) ov_clear;
    // int function(char* path, OggVorbis_File* vf) ov_fopen; --> seems to be missing
    // int function(FILE* f, OggVorbis_File* vf, char* initial, int ibytes) ov_open; --> rewritten below
    int function(void* datasource, OggVorbis_File* vf, char* initial, int  ibytes, ov_callbacks callbacks) ov_open_callbacks;

    // int function(FILE* f,OggVorbis_File* vf, byte* initial, int  ibytes) ov_test; --> rewritten below
    int function(void* datasource, OggVorbis_File* vf, char* initial, int  ibytes, ov_callbacks callbacks) ov_test_callbacks;
    int function(OggVorbis_File* vf) ov_test_open;

    int function(OggVorbis_File* vf,int i) ov_bitrate;
    int function(OggVorbis_File* vf) ov_bitrate_instant;
    int function(OggVorbis_File* vf) ov_streams;
    int function(OggVorbis_File* vf) ov_seekable;
    int function(OggVorbis_File* vf,int i) ov_serialnumber;

    ogg_int64_t function(OggVorbis_File* vf,int i) ov_raw_total;
    ogg_int64_t function(OggVorbis_File* vf,int i) ov_pcm_total;
    double function(OggVorbis_File* vf,int i) ov_time_total;

    int function(OggVorbis_File* vf,ogg_int64_t pos) ov_raw_seek;
    int function(OggVorbis_File* vf,ogg_int64_t pos) ov_pcm_seek;
    int function(OggVorbis_File* vf,ogg_int64_t pos) ov_pcm_seek_page;
    int function(OggVorbis_File* vf,double pos) ov_time_seek;
    int function(OggVorbis_File* vf,double pos) ov_time_seek_page;

    int function(OggVorbis_File* vf,ogg_int64_t pos) ov_raw_seek_lap;
    int function(OggVorbis_File* vf,ogg_int64_t pos) ov_pcm_seek_lap;
    int function(OggVorbis_File* vf,ogg_int64_t pos) ov_pcm_seek_page_lap;
    int function(OggVorbis_File* vf,double pos) ov_time_seek_lap;
    int function(OggVorbis_File* vf,double pos) ov_time_seek_page_lap;

    ogg_int64_t function(OggVorbis_File* vf) ov_raw_tell;
    ogg_int64_t function(OggVorbis_File* vf) ov_pcm_tell;
    double function(OggVorbis_File* vf) ov_time_tell;

    vorbis_info* function(OggVorbis_File* vf,int link) ov_info;
    vorbis_comment* function(OggVorbis_File* vf,int link) ov_comment;

    int function(OggVorbis_File* vf, float*** pcm_channels, int samples, int* bitstream) ov_read_float;
    int function(OggVorbis_File* vf, byte* buffer, int length, int bigendianp, int word, int sgned, int* bitstream) ov_read;
    int function(OggVorbis_File* vf1,OggVorbis_File* vf2) ov_crosslap;

    int function(OggVorbis_File* vf,int flag) ov_halfrate;
    int function(OggVorbis_File* vf) ov_halfrate_p;
    ");
}

private extern (C)
{
    size_t Derelict_VorbisRead(void *ptr, size_t byteSize, size_t sizeToRead, void *datasource)
    {
        return fread(ptr, byteSize, sizeToRead, cast(FILE*)datasource);
    }
    int Derelict_VorbisSeek(void *datasource, ogg_int64_t offset, int whence)
    {
        return fseek(cast(FILE*)datasource, cast(int)offset, whence);
    }
    int Derelict_VorbisClose(void *datasource)
    {
        return fclose(cast(FILE*)datasource);
    }
    int Derelict_VorbisTell(void *datasource)
    {
        return ftell(cast(FILE*)datasource);
    }
}

// ov_open is rewritten below because of incompatibility between compilers with FILE struct
// Using this wrapper, it *should* work exactly as it would in c++. --JoeCoder
int ov_open(FILE *f, OggVorbis_File *vf, char *initial, long ibytes)
{
    // Fill the ov_callbacks structure
    ov_callbacks    vorbisCallbacks;    // Structure to hold pointers to callback functions
    vorbisCallbacks.read_func  = &Derelict_VorbisRead;
    vorbisCallbacks.close_func = &Derelict_VorbisClose;
    vorbisCallbacks.seek_func  = &Derelict_VorbisSeek;
    vorbisCallbacks.tell_func  = &Derelict_VorbisTell;

    return ov_open_callbacks(cast(void *)f, vf, initial, cast(int)ibytes, vorbisCallbacks);
}

// ditto for ov_test
int ov_test(FILE *f, OggVorbis_File *vf, char *initial, long ibytes)
{
    // Fill the ov_callbacks structure
    ov_callbacks    vorbisCallbacks;    // Structure to hold pointers to callback functions
    vorbisCallbacks.read_func  = &Derelict_VorbisRead;
    vorbisCallbacks.close_func = &Derelict_VorbisClose;
    vorbisCallbacks.seek_func  = &Derelict_VorbisSeek;
    vorbisCallbacks.tell_func  = &Derelict_VorbisTell;

    return ov_test_callbacks(cast(void *)f, vf, initial, cast(int)ibytes, vorbisCallbacks);
}