/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.opengl.glx;

version (freebsd)
{
    version = GLX;
}

else version (FreeBSD)
{
    version = GLX;
}

else version (linux)
{
    version = GLX;
}

version(GLX)
{

private
{
    import derelict.opengl.gltypes;
    import derelict.util.compat;
    import derelict.util.loader;
    import derelict.util.xtypes;
}

/*
 * Tokens for glXChooseVisual and glXGetConfig:
 */
enum
{
  GLX_USE_GL           = 1,
  GLX_BUFFER_SIZE      = 2,
  GLX_LEVEL            = 3,
  GLX_RGBA             = 4,
  GLX_DOUBLEBUFFER     = 5,
  GLX_STEREO           = 6,
  GLX_AUX_BUFFERS      = 7,
  GLX_RED_SIZE         = 8,
  GLX_GREEN_SIZE       = 9,
  GLX_BLUE_SIZE        = 10,
  GLX_ALPHA_SIZE       = 11,
  GLX_DEPTH_SIZE       = 12,
  GLX_STENCIL_SIZE     = 13,
  GLX_ACCUM_RED_SIZE   = 14,
  GLX_ACCUM_GREEN_SIZE = 15,
  GLX_ACCUM_BLUE_SIZE  = 16,
  GLX_ACCUM_ALPHA_SIZE = 17
}


/*
 * Error codes returned by glXGetConfig:
 */
enum
{
  GLX_BAD_SCREEN    = 1,
  GLX_BAD_ATTRIBUTE = 2,
  GLX_NO_EXTENSION  = 3,
  GLX_BAD_VISUAL    = 4,
  GLX_BAD_CONTEXT   = 5,
  GLX_BAD_VALUE     =  6,
  GLX_BAD_ENUM      = 7
}

/*
 * GLX 1.1 and later:
 */
enum
{
  GLX_VENDOR     = 1,
  GLX_VERSION    = 2,
  GLX_EXTENSIONS = 3
}


/*
 * GLX 1.3 and later:
 */
enum
{
  GLX_CONFIG_CAVEAT           = 0x20,
  GLX_DONT_CARE               = 0xFFFFFFFF,
  GLX_X_VISUAL_TYPE           = 0x22,
  GLX_TRANSPARENT_TYPE        = 0x23,
  GLX_TRANSPARENT_INDEX_VALUE = 0x24,
  GLX_TRANSPARENT_RED_VALUE   = 0x25,
  GLX_TRANSPARENT_GREEN_VALUE = 0x26,
  GLX_TRANSPARENT_BLUE_VALUE  = 0x27,
  GLX_TRANSPARENT_ALPHA_VALUE = 0x28,
  GLX_WINDOW_BIT              = 0x00000001,
  GLX_PIXMAP_BIT              = 0x00000002,
  GLX_PBUFFER_BIT             = 0x00000004,
  GLX_AUX_BUFFERS_BIT         = 0x00000010,
  GLX_FRONT_LEFT_BUFFER_BIT   = 0x00000001,
  GLX_FRONT_RIGHT_BUFFER_BIT  = 0x00000002,
  GLX_BACK_LEFT_BUFFER_BIT    = 0x00000004,
  GLX_BACK_RIGHT_BUFFER_BIT   = 0x00000008,
  GLX_DEPTH_BUFFER_BIT        = 0x00000020,
  GLX_STENCIL_BUFFER_BIT      = 0x00000040,
  GLX_ACCUM_BUFFER_BIT        = 0x00000080,
  GLX_NONE                    = 0x8000,
  GLX_SLOW_CONFIG             = 0x8001,
  GLX_TRUE_COLOR              = 0x8002,
  GLX_DIRECT_COLOR            = 0x8003,
  GLX_PSEUDO_COLOR            = 0x8004,
  GLX_STATIC_COLOR            = 0x8005,
  GLX_GRAY_SCALE              = 0x8006,
  GLX_STATIC_GRAY             = 0x8007,
  GLX_TRANSPARENT_RGB         = 0x8008,
  GLX_TRANSPARENT_INDEX       = 0x8009,
  GLX_VISUAL_ID               = 0x800B,
  GLX_SCREEN                  = 0x800C,
  GLX_NON_CONFORMANT_CONFIG   =  0x800D,
  GLX_DRAWABLE_TYPE           = 0x8010,
  GLX_RENDER_TYPE             = 0x8011,
  GLX_X_RENDERABLE            = 0x8012,
  GLX_FBCONFIG_ID             = 0x8013,
  GLX_RGBA_TYPE               = 0x8014,
  GLX_COLOR_INDEX_TYPE        = 0x8015,
  GLX_MAX_PBUFFER_WIDTH       = 0x8016,
  GLX_MAX_PBUFFER_HEIGHT      = 0x8017,
  GLX_MAX_PBUFFER_PIXELS      = 0x8018,
  GLX_PRESERVED_CONTENTS      = 0x801B,
  GLX_LARGEST_PBUFFER         = 0x801C,
  GLX_WIDTH                   = 0x801D,
  GLX_HEIGHT                  = 0x801E,
  GLX_EVENT_MASK              = 0x801F,
  GLX_DAMAGED                 = 0x8020,
  GLX_SAVED                   = 0x8021,
  GLX_WINDOW                  = 0x8022,
  GLX_PBUFFER                 = 0x8023,
  GLX_PBUFFER_HEIGHT          = 0x8040,
  GLX_PBUFFER_WIDTH           = 0x8041,
  GLX_RGBA_BIT                = 0x00000001,
  GLX_COLOR_INDEX_BIT         = 0x00000002,
  GLX_PBUFFER_CLOBBER_MASK    = 0x08000000
}

/*
 * GLX 1.4 and later:
 */
enum
{
  GLX_SAMPLE_BUFFERS = 0x186a0, /*100000*/
  GLX_SAMPLES        = 0x186a1  /*100001*/
}

struct __GLXcontextRec {}
struct __GLXFBConfigRec {}

typedef uint GLXContentID;
typedef uint GLXPixmap;
typedef uint GLXDrawable;
typedef uint GLXPbuffer;
typedef uint GLXWindow;
typedef uint GLXFBConfigID;

typedef __GLXcontextRec *GLXContext;      // __GLXcontextRec type is opaque
typedef __GLXFBConfigRec *GLXFBConfig;    // __GLXFBConfigRec type is opaque

/*
 * GLX Events
 */

struct GLXPbufferClobberEvent
{
    int         event_type;
    int         draw_type;
    uint        serial;
    Bool        send_event;
    Display*    display;
    GLXDrawable drawable;
    uint        buffer_mask;
    uint        aux_buffer;
    int         x, y;
    int         width, height;
    int         count;
}

union GLXEvent
{
    GLXPbufferClobberEvent glxpbufferclobber;
    int pad[24];
}

// Function pointer variables

extern (C)
{
     mixin(gsharedString!() ~
     "
     XVisualInfo* function(Display*,int,int*) glXChooseVisual;
     void function(Display*,GLXContext,GLXContext,uint) glXCopyContext;
     GLXContext function(Display*,XVisualInfo*,GLXContext,Bool) glXCreateContext;
     GLXPixmap function(Display*,XVisualInfo*,Pixmap) glXCreateGLXPixmap;
     void function(Display*,GLXContext) glXDestroyContext;
     void function(Display*,GLXPixmap) glXDestroyGLXPixmap;
     int  function(Display*,XVisualInfo*,int,int*) glXGetConfig;
     GLXContext function() glXGetCurrentContext;
     GLXDrawable function() glXGetCurrentDrawable;
     Bool function(Display*,GLXContext) glXIsDirect;
     Bool function(Display*,GLXDrawable,GLXContext) glXMakeCurrent;
     Bool function(Display*,int*,int*) glXQueryExtension;
     Bool function(Display*,int*,int*) glXQueryVersion;
     void function(Display*,GLXDrawable) glXSwapBuffers;
     void function(Font,int,int,int) glXUseXFont;
     void function() glXWaitGL;
     void function() glXWaitX;
     char* function(Display*,int) glXGetClientString;
     char* function(Display*,int,int) glXQueryServerString;
     char* function(Display*,int) glXQueryExtensionsString;

    /* GLX 1.3 */

     GLXFBConfig* function(Display*,int,int*) glXGetFBConfigs;
     GLXFBConfig* function(Display*,int,int*,int*) glXChooseFBConfig;
     int  function(Display*,GLXFBConfig,int,int*) glXGetFBConfigAttrib;
     XVisualInfo* function(Display*,GLXFBConfig) glXGetVisualFromFBConfig;
     GLXWindow function(Display*,GLXFBConfig,Window,int*) glXCreateWindow;
     void function(Display*,GLXWindow) glXDestroyWindow;
     GLXPixmap function(Display*,GLXFBConfig,Pixmap,int*) glXCreatePixmap;
     void function(Display*,GLXPixmap) glXDestroyPixmap;
     GLXPbuffer function(Display*,GLXFBConfig,int*) glXCreatePbuffer;
     void function(Display*,GLXPbuffer) glXDestroyPbuffer;
     void function(Display*,GLXDrawable,int,uint*) glXQueryDrawable;
     GLXContext function(Display*,GLXFBConfig,int,GLXContext,Bool) glXCreateNewContext;
     Bool function(Display*,GLXDrawable,GLXDrawable,GLXContext) glXMakeContextCurrent;
     GLXDrawable function() glXGetCurrentReadDrawable;
     Display* function() glXGetCurrentDisplay;
     int  function(Display*,GLXContext,int,int*) glXQueryContext;
     void function(Display*,GLXDrawable,uint) glXSelectEvent;
     void function(Display*,GLXDrawable,uint*) glXGetSelectedEvent;

    /* GLX 1.4+ */
     void* function(CCPTR) glXGetProcAddress;
     ");
}

/* GLX extensions -- legacy */

/*
GLXContextID            function(const GLXContext)
                            pfglXGetContextIDEXT;
GLXContext              function(Display*,GLXContextID)
                            pfglXImportContextEXT;
void                    function(Display*,GLXContext)
                            pfglXFreeContextEXT;
int                     function(Display*,GLXContext,int,int*)
                            pfglXQueryContextInfoEXT;
Display*                function()
                            pfglXGetCurrentDisplayEXT;
void function()         function(const GLubyte*)
                            pfglXGetProcAddressARB;
*/

/+

// All extensions are disabled in the current version
// until further testing is done and need is established.

void*                   function(GLsizei,GLfloat,GLfloat,GLfloat)
                            glXAllocateMemoryNV;
void                    function(GLvoid*)
                            glXFreeMemoryNV;
void*                   function(GLsizei,GLfloat,GLfloat,GLfloat)
                            PFNGLXALLOCATEMEMORYNVPROC;
void                    function(GLvoid*)
                            PFNGLXFREEMEMORYNVPROC;

/* Mesa specific? */

// work in progress

/* GLX_ARB specific? */

Bool                    function(Display*, GLXPbuffer,int)
                            glXBindTexImageARB;
Bool                    function(Display*, GLXPbuffer,int)
                            glXReleaseTexImageARB;
Bool                    function(Display*,GLXDrawable,int*)
                            glXDrawableAttribARB;

+/

package
{
    void loadPlatformGL(void delegate(void**, string, bool doThrow = true) bindFunc)
    {
        bindFunc(cast(void**)&glXChooseVisual, "glXChooseVisual");
        bindFunc(cast(void**)&glXCopyContext, "glXCopyContext");
        bindFunc(cast(void**)&glXCreateContext, "glXCreateContext");
        bindFunc(cast(void**)&glXCreateGLXPixmap, "glXCreateGLXPixmap");
        bindFunc(cast(void**)&glXDestroyContext, "glXDestroyContext");
        bindFunc(cast(void**)&glXDestroyGLXPixmap, "glXDestroyGLXPixmap");
        bindFunc(cast(void**)&glXGetConfig, "glXGetConfig");
        bindFunc(cast(void**)&glXGetCurrentContext, "glXGetCurrentContext");
        bindFunc(cast(void**)&glXGetCurrentDrawable, "glXGetCurrentDrawable");
        bindFunc(cast(void**)&glXIsDirect, "glXIsDirect");
        bindFunc(cast(void**)&glXMakeCurrent, "glXMakeCurrent");
        bindFunc(cast(void**)&glXQueryExtension, "glXQueryExtension");
        bindFunc(cast(void**)&glXQueryVersion, "glXQueryVersion");
        bindFunc(cast(void**)&glXSwapBuffers, "glXSwapBuffers");
        bindFunc(cast(void**)&glXUseXFont, "glXUseXFont");
        bindFunc(cast(void**)&glXWaitGL, "glXWaitGL");
        bindFunc(cast(void**)&glXWaitX, "glXWaitX");
        bindFunc(cast(void**)&glXGetClientString, "glXGetClientString");
        bindFunc(cast(void**)&glXQueryServerString, "glXQueryServerString");
        bindFunc(cast(void**)&glXQueryExtensionsString, "glXQueryExtensionsString");

        bindFunc(cast(void**)&glXGetFBConfigs, "glXGetFBConfigs");
        bindFunc(cast(void**)&glXChooseFBConfig, "glXChooseFBConfig");
        bindFunc(cast(void**)&glXGetFBConfigAttrib, "glXGetFBConfigAttrib");
        bindFunc(cast(void**)&glXGetVisualFromFBConfig, "glXGetVisualFromFBConfig");
        bindFunc(cast(void**)&glXCreateWindow, "glXCreateWindow");
        bindFunc(cast(void**)&glXDestroyWindow, "glXDestroyWindow");
        bindFunc(cast(void**)&glXCreatePixmap, "glXCreatePixmap");
        bindFunc(cast(void**)&glXDestroyPixmap, "glXDestroyPixmap");
        bindFunc(cast(void**)&glXCreatePbuffer, "glXCreatePbuffer");
        bindFunc(cast(void**)&glXDestroyPbuffer, "glXDestroyPbuffer");
        bindFunc(cast(void**)&glXQueryDrawable, "glXQueryDrawable");
        bindFunc(cast(void**)&glXCreateNewContext, "glXCreateNewContext");
        bindFunc(cast(void**)&glXMakeContextCurrent, "glXMakeContextCurrent");
        bindFunc(cast(void**)&glXGetCurrentReadDrawable, "glXGetCurrentReadDrawable");
        bindFunc(cast(void**)&glXGetCurrentDisplay, "glXGetCurrentDisplay");
        bindFunc(cast(void**)&glXQueryContext, "glXQueryContext");
        bindFunc(cast(void**)&glXSelectEvent, "glXSelectEvent");
        bindFunc(cast(void**)&glXGetSelectedEvent, "glXGetSelectedEvent");

        bindFunc(cast(void**)&glXGetProcAddress, "glXGetProcAddressARB");
    }

    void* loadGLSymbol(string symName)
    {
        return glXGetProcAddress(toCString(symName));
    }
}

}   // version(linux)
