/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.opengl.extloader;

private
{
    import derelict.opengl.extfuncs;
    import derelict.opengl.gltypes;
    import derelict.opengl.glfuncs;
    import derelict.util.compat;
    import derelict.util.exception;

    version(Windows)
    {
        import derelict.opengl.wgl;
        import derelict.util.wintypes;
        alias wglGetProcAddress getAddress;
    }
}

version(DerelictGL_ALL)
{
    version = DerelictGL_ARB;
    version = DerelictGL_EXT;
    version = DerelictGL_NV;
    version = DerelictGL_ATI;
    version = DerelictGL_SGI;
    version = DerelictGL_SGIS;
    version = DerelictGL_SGIX;
    version = DerelictGL_HP;
    version = DerelictGL_PGI;
    version = DerelictGL_IBM;
    version = DerelictGL_WIN;
    version = DerelictGL_INTEL;
    version = DerelictGL_REND;
    version = DerelictGL_APPLE;
    version = DerelictGL_SUNX;
    version = DerelictGL_SUN;
    version = DerelictGL_INGR;
}

private
{
    string extStr;
    version(Windows) string winExtStr;
    GLExtensionState[string] loaded;
}

package
{
    void extLoadAll()
    {
        extLoadCommon();
        extLoadPlatform();
    }

    string[] getLoadedExtensionNames()
    {
        auto keys = loaded.keys;
        string[] ret;
        foreach(key; keys)
        {
            if(GLExtensionState.Loaded == loaded[key])
                ret ~= key;
        }
        return ret;
    }

    string[] getNotLoadedExtensionNames()
    {
        auto keys = loaded.keys;
        string[] ret;
        foreach(key; keys)
        {
            GLExtensionState state = loaded[key];
            if(GLExtensionState.Loaded != state)
            {
                if(GLExtensionState.DriverUnsupported == state)
                    ret ~= key ~ " (Unsupported by Driver)";
                else
                    ret ~= key ~ " (Failed to Load)";
            }
        }
        return ret;
    }

    bool extIsSupported(string extName)
    {
        if(extStr is null) extStr = toDString(glGetString(GL_EXTENSIONS));
        bool found = (extStr.findStr(extName) != -1);
        version(Windows)
        {
            if(!found && winExtStr !is null)
                return (winExtStr.findStr(extName) != -1);
        }
        return found;
    }

    GLExtensionState extGetState(string extName)
    {
        GLExtensionState* state = (extName in loaded);
        return (state !is null) ? *state : GLExtensionState.DerelictUnsupported;
    }
}

private
{
    void extLoadCommon()
    {
        version(DerelictGL_ARB)
        {
            loaded["GL_ARB_multitexture"] = load_GL_ARB_multitexture();
            loaded["GL_ARB_transpose_matrix"] = load_GL_ARB_transpose_matrix();
            loaded["GL_ARB_multisample"] = load_GL_ARB_multisample();
            loaded["GL_ARB_texture_env_add"] = load_GL_ARB_texture_env_add();
            loaded["GL_ARB_texture_cube_map"] = load_GL_ARB_texture_cube_map();
            loaded["GL_ARB_texture_compression"] = load_GL_ARB_texture_compression();
            loaded["GL_ARB_texture_border_clamp"] = load_GL_ARB_texture_border_clamp();
            loaded["GL_ARB_point_parameters"] = load_GL_ARB_point_parameters();
            loaded["GL_ARB_vertex_blend"] = load_GL_ARB_vertex_blend();
            loaded["GL_ARB_matrix_palette"] = load_GL_ARB_matrix_palette();
            loaded["GL_ARB_texture_env_combine"] = load_GL_ARB_texture_env_combine();
            loaded["GL_ARB_texture_env_crossbar"] = load_GL_ARB_texture_env_crossbar();
            loaded["GL_ARB_texture_env_dot3"] = load_GL_ARB_texture_env_dot3();
            loaded["GL_ARB_texture_mirrored_repeat"] = load_GL_ARB_texture_mirrored_repeat();
            loaded["GL_ARB_depth_texture"] = load_GL_ARB_depth_texture();
            loaded["GL_ARB_shadow"] = load_GL_ARB_shadow();
            loaded["GL_ARB_shadow_ambient"] = load_GL_ARB_shadow_ambient();
            loaded["GL_ARB_window_pos"] = load_GL_ARB_window_pos();
            loaded["GL_ARB_vertex_program"] = load_GL_ARB_vertex_program();
            loaded["GL_ARB_fragment_program"] = load_GL_ARB_fragment_program();
            loaded["GL_ARB_vertex_buffer_object"] = load_GL_ARB_vertex_buffer_object();
            loaded["GL_ARB_occlusion_query"] = load_GL_ARB_occlusion_query();
            loaded["GL_ARB_shader_objects"] = load_GL_ARB_shader_objects();
            loaded["GL_ARB_vertex_shader"] = load_GL_ARB_vertex_shader();
            loaded["GL_ARB_fragment_shader"] = load_GL_ARB_fragment_shader();
            loaded["GL_ARB_shading_language_100"] = load_GL_ARB_shading_language_100();
            loaded["GL_ARB_texture_non_power_of_two"] = load_GL_ARB_texture_non_power_of_two();
            loaded["GL_ARB_point_sprite"] = load_GL_ARB_point_sprite();
            loaded["GL_ARB_fragment_program_shadow"] = load_GL_ARB_fragment_program_shadow();
            loaded["GL_ARB_draw_buffers"] = load_GL_ARB_draw_buffers();
            loaded["GL_ARB_texture_rectangle"] = load_GL_ARB_texture_rectangle();
            loaded["GL_ARB_color_buffer_float"] = load_GL_ARB_color_buffer_float();
            loaded["GL_ARB_half_float_pixel"] = load_GL_ARB_half_float_pixel();
            loaded["GL_ARB_texture_float"] = load_GL_ARB_texture_float();
            loaded["GL_ARB_pixel_buffer_object"] = load_GL_ARB_pixel_buffer_object();
            loaded["GL_ARB_depth_buffer_float"] = load_GL_ARB_depth_buffer_float();
            loaded["GL_ARB_draw_instanced"] = load_GL_ARB_draw_instanced();
            loaded["GL_ARB_framebuffer_object"] = load_GL_ARB_framebuffer_object();
            loaded["GL_ARB_framebuffer_sRGB"] = load_GL_ARB_framebuffer_sRGB();
            loaded["GL_ARB_geometry_shader4"] = load_GL_ARB_geometry_shader4();
            loaded["GL_ARB_half_float_vertex"] = load_GL_ARB_half_float_vertex();
            loaded["GL_ARB_imaging"] = load_GL_ARB_imaging();
            loaded["GL_ARB_instanced_arrays"] = load_GL_ARB_instanced_arrays();
            loaded["GL_ARB_texture_buffer_object"] = load_GL_ARB_texture_buffer_object();
            loaded["GL_ARB_texture_compression_rgtc"] = load_GL_ARB_texture_compression_rgtc();
            loaded["GL_ARB_teture_rg"] = load_GL_ARB_teture_rg();
            loaded["GL_ARB_vertex_array_object"] = load_GL_ARB_vertex_array_object();
            loaded["GL_ARB_uniform_buffer_object"] = load_GL_ARB_uniform_buffer_object();
        }

        version(DerelictGL_EXT)
        {
            loaded["GL_EXT_abgr"] = load_GL_EXT_abgr();
            loaded["GL_EXT_blend_color"] = load_GL_EXT_blend_color();
            loaded["GL_EXT_polygon_offset"] = load_GL_EXT_polygon_offset();
            loaded["GL_EXT_texture"] = load_GL_EXT_texture();
            loaded["GL_EXT_texture3D"] = load_GL_EXT_texture3D();
            loaded["GL_EXT_subtexture"] = load_GL_EXT_subtexture();
            loaded["GL_EXT_copy_texture"] = load_GL_EXT_copy_texture();
            loaded["GL_EXT_histogram"] = load_GL_EXT_histogram();
            loaded["GL_EXT_convolution"] = load_GL_EXT_convolution();
            loaded["GL_EXT_cmyka"] = load_GL_EXT_cmyka();
            loaded["GL_EXT_texture_object"] = load_GL_EXT_texture_object();
            loaded["GL_EXT_packed_pixels"] = load_GL_EXT_packed_pixels();
            loaded["GL_EXT_rescale_normal"] = load_GL_EXT_rescale_normal();
            loaded["GL_EXT_vertex_array"] = load_GL_EXT_vertex_array();
            loaded["GL_EXT_misc_attribute"] = load_GL_EXT_misc_attribute();
            loaded["GL_EXT_blend_minmax"] = load_GL_EXT_blend_minmax();
            loaded["GL_EXT_blend_subtract"] = load_GL_EXT_blend_subtract();
            loaded["GL_EXT_blend_logic_op"] = load_GL_EXT_blend_logic_op();
            loaded["GL_EXT_point_parameters"] = load_GL_EXT_point_parameters();
            loaded["GL_EXT_color_subtable"] = load_GL_EXT_color_subtable();
            loaded["GL_EXT_paletted_texture"] = load_GL_EXT_paletted_texture();
            loaded["GL_EXT_clip_volume_hint"] = load_GL_EXT_clip_volume_hint();
            loaded["GL_EXT_index_texture"] = load_GL_EXT_index_texture();
            loaded["GL_EXT_index_material"] = load_GL_EXT_index_material();
            loaded["GL_EXT_index_func"] = load_GL_EXT_index_func();
            loaded["GL_EXT_index_array_formats"] = load_GL_EXT_index_array_formats();
            loaded["GL_EXT_compiled_vertex_array"] = load_GL_EXT_compiled_vertex_array();
            loaded["GL_EXT_cull_vertex"] = load_GL_EXT_cull_vertex();
            loaded["GL_EXT_draw_range_elements"] = load_GL_EXT_draw_range_elements();
            loaded["GL_EXT_light_texture"] = load_GL_EXT_light_texture();
            loaded["GL_EXT_bgra"] = load_GL_EXT_bgra();
            loaded["GL_EXT_pixel_transform"] = load_GL_EXT_pixel_transform();
            loaded["GL_EXT_pixel_transform_color_table"] = load_GL_EXT_pixel_transform_color_table();
            loaded["GL_EXT_shared_texture_palette"] = load_GL_EXT_shared_texture_palette();
            loaded["GL_EXT_separate_specular_color"] = load_GL_EXT_separate_specular_color();
            loaded["GL_EXT_secondary_color"] = load_GL_EXT_secondary_color();
            loaded["GL_EXT_texture_perturb_normal"] = load_GL_EXT_texture_perturb_normal();
            loaded["GL_EXT_multi_draw_arrays"] = load_GL_EXT_multi_draw_arrays();
            loaded["GL_EXT_fog_coord"] = load_GL_EXT_fog_coord();
            loaded["GL_EXT_coordinate_frame"] = load_GL_EXT_coordinate_frame();
            loaded["GL_EXT_texture_env_combine"] = load_GL_EXT_texture_env_combine();
            loaded["GL_EXT_blend_func_separate"] = load_GL_EXT_blend_func_separate();
            loaded["GL_EXT_stencil_wrap"] = load_GL_EXT_stencil_wrap();
            loaded["GL_EXT_422_pixels"] = load_GL_EXT_422_pixels();
            loaded["GL_EXT_texture_cube_map"] = load_GL_EXT_texture_cube_map();
            loaded["GL_EXT_texture_env_add"] = load_GL_EXT_texture_env_add();
            loaded["GL_EXT_texture_lod_bias"] = load_GL_EXT_texture_lod_bias();
            loaded["GL_EXT_texture_filter_anisotropic"] = load_GL_EXT_texture_filter_anisotropic();
        }

        version(DerelictGL_NV)
        {
            loaded["GL_NV_texgen_reflection"] = load_GL_NV_texgen_reflection();
        }

        version(DerelictGL_ATI)
        {
        }

        version(DerelictGL_SGI)
        {
            loaded["GL_SGI_color_matrix"] = load_GL_SGI_color_matrix();
            loaded["GL_SGI_color_table"] = load_GL_SGI_color_table();
            loaded["GL_SGI_texture_color_table"] = load_GL_SGI_texture_color_table();
        }

        version(DerelictGL_SGIS)
        {
            loaded["GL_SGIS_texture_filter4"] = load_GL_SGIS_texture_filter4;
            loaded["GL_SGIS_pixel_texture"] = load_GL_SGIS_pixel_texture();
            loaded["GL_SGIS_texture4D"] = load_GL_SGIS_texture4D();
            loaded["GL_SGIS_detail_texture"] = load_GL_SGIS_detail_texture();
            loaded["GL_SGIS_sharpen_texture"] = load_GL_SGIS_sharpen_texture();
            loaded["GL_SGIS_texture_lod"] = load_GL_SGIS_texture_lod();
            loaded["GL_SGIS_multisample"] = load_GL_SGIS_multisample();
            loaded["GL_SGIS_generate_mipmap"] = load_GL_SGIS_generate_mipmap();
            loaded["GL_SGIS_texture_edge_clamp"] = load_GL_SGIS_texture_edge_clamp();
            loaded["GL_SGIS_texture_border_clamp"] = load_GL_SGIS_texture_border_clamp();
            loaded["GL_SGIS_texture_select"] = load_GL_SGIS_texture_select();
            loaded["GL_SGIS_point_parameters"] = load_GL_SGIS_point_parameters();
            loaded["GL_SGIS_fog_function"] = load_GL_SGIS_fog_function();
        }

        version(DerelictGL_SGIX)
        {
            loaded["GL_SGIX_pixel_texture"] = load_GL_SGIX_pixel_texture();
            loaded["GL_SGIX_clipmap"] = load_GL_SGIX_clipmap();
            loaded["GL_SGIX_shadow"] = load_GL_SGIX_shadow();
            loaded["GL_SGIX_interlace"] = load_GL_SGIX_interlace();
            loaded["GL_SGIX_pixel_tiles"] = load_GL_SGIX_pixel_tiles();
            loaded["GL_SGIX_sprite"] = load_GL_SGIX_sprite();
            loaded["GL_SGIX_texture_multi_buffer"] = load_GL_SGIX_texture_multi_buffer();
            loaded["GL_SGIX_instruments"] = load_GL_SGIX_instruments();
            loaded["GL_SGIX_texture_scale_bias"] = load_GL_SGIX_texture_scale_bias();
            loaded["GL_SGIX_framezoom"] = load_GL_SGIX_framezoom();
            loaded["GL_SGIX_tag_sample_buffer"] = load_GL_SGIX_tag_sample_buffer();
            loaded["GL_SGIX_polynomial_ffd"] = load_GL_SGIX_polynomial_ffd();
            loaded["GL_SGIX_reference_plane"] = load_GL_SGIX_reference_plane();
            loaded["GL_SGIX_flush_raster"] = load_GL_SGIX_flush_raster();
            loaded["GL_SGIX_depth_texture"] = load_GL_SGIX_depth_texture();
            loaded["GL_SGIX_fog_offset"] = load_GL_SGIX_fog_offset();
            loaded["GL_SGIX_texture_add_env"] = load_GL_SGIX_texture_add_env();
            loaded["GL_SGIX_list_priority"] = load_GL_SGIX_list_priority();
            loaded["GL_SGIX_ir_instrument1"] = load_GL_SGIX_ir_instrument1();
            loaded["GL_SGIX_calligraphic_fragment"] = load_GL_SGIX_calligraphic_fragment();
            loaded["GL_SGIX_texture_lod_bias"] = load_GL_SGIX_texture_lod_bias();
            loaded["GL_SGIX_shadow_ambient"] = load_GL_SGIX_shadow_ambient();
            loaded["GL_SGIX_ycrcb"] = load_GL_SGIX_ycrcb();
            loaded["GL_SGIX_fragment_lighting"] = load_GL_SGIX_fragment_lighting();
            loaded["GL_SGIX_blend_alpha_minmax"] = load_GL_SGIX_blend_alpha_minmax();
            loaded["GL_SGIX_impact_pixel_texture"] = load_GL_SGIX_impact_pixel_texture();
            loader["GL_SGIX_async"] = load_GL_SGIX_async();
            loader["GL_SGIX_async_pixel"] = load_GL_SGIX_async_pixel();
            loader["GL_SGIX_async_histogram"] = load_GL_SGIX_async_histogram();
            loaded["GL_SGIX_fog_scale"] = load_GL_SGIX_fog_scale();
        }

        version(DerelictGL_HP)
        {
            loaded["GL_HP_image_transform"] = load_GL_HP_image_transform();
            loaded["GL_HP_convolution_border_modes"] = load_GL_HP_convolution_border_modes();
            loaded["GL_HP_texture_lighting"] = load_GL_HP_texture_lighting();
            loaded["GL_HP_occlusion_test"] = load_GL_HP_occlusion_test();
        }

        version(DerelictGL_PGI)
        {
            loaded["GL_PGI_vertex_hints"] = load_GL_PGI_vertex_hints();
            loaded["GL_PGI_misc_hints"] = load_GL_PGI_misc_hints();
        }

        version(DerelictGL_IBM)
        {
            loaded["GL_IBM_rasterpos_clip"] = load_GL_IBM_rasterpos_clip();
        }

        version(DerelictGL_WIN)
        {
            loaded["GL_WIN_phong_shading"] = load_GL_WIN_phong_shading();
            loaded["GL_WIN_specular_fog"] = load_GL_WIN_specular_fog();
        }

        version(DerelictGL_INTEL)
        {
            loaded["GL_INTEL_parallel_arrays"] = load_GL_INTEL_parallel_arrays();
        }

        version(DerelictGL_REND)
        {
            loaded["GL_REND_screen_coordinates"] = load_GL_REND_screen_coordinates();
        }

        version(DerelictGL_APPLE)
        {
            loaded["GL_APPLE_specular_vector"] = load_GL_APPLE_specular_vector();
            loaded["GL_APPLE_transform_hint"] = load_GL_APPLE_transform_hint();
        }

        version(DerelictGL_SUNX)
        {
            loaded["GL_SUNX_constant_data"] = load_GL_SUNX_constant_data();
        }

        version(DerelictGL_SUN)
        {
            loaded["GL_SUN_global_alpha"] = load_GL_SUN_global_alpha();
            loaded["GL_SUN_triangle_list"] = load_GL_SUN_triangle_list();
            loaded["GL_SUN_vertex"] = load_GL_SUN_vertex();
            loaded["GL_SUN_convolution_border_modes"] = load_GL_SUN_convolution_border_modes();
        }

        version(DerelictGL_INGR)
        {
            loaded["GL_INGR_color_clamp"] = load_GL_INGR_color_clamp();
            loaded["GL_INGR_interlace_read"] = load_GL_INGR_interlace_read();
        }
    }

    void extLoadPlatform()
    {
        version (Windows)
        {
            // wgl extensions (mostly) all rely on WGL_ARB_extensions string, so load it first
            loaded["WGL_ARB_extensions_string"] = load_WGL_ARB_extensions_string();

            // load the wgl extensions string
            if(wglGetExtensionsStringARB !is null)
            {
                HDC dc = wglGetCurrentDC();
                if(dc !is null)
                    winExtStr = toDString(wglGetExtensionsStringARB(dc));
                else
                    throw new DerelictException("Cannot load WGL extensions: No valid Device Context!");
            }

            // now load the other WGL extensions
            loaded["WGL_ARB_buffer_region"] = load_WGL_ARB_buffer_region();
            loaded["WGL_ARB_multisample"] = load_WGL_ARB_multisample();
            loaded["WGL_ARB_pixel_format"] = load_WGL_ARB_pixel_format();
            loaded["WGL_ARB_make_current_read"] = load_WGL_ARB_make_current_read();
            loaded["WGL_ARB_pbuffer"] = load_WGL_ARB_pbuffer();
            loaded["WGL_ARB_render_texture"] = load_WGL_ARB_render_texture();
            loaded["WGL_ARB_pixel_format_float"] = load_WGL_ARB_pixel_format_float();
            loaded["WGL_ARB_create_context"] = load_WGL_ARB_create_context();
        }

        else
            assert(false, `"extLoadPlatform"  is not implemented for this operating system.`);
    }

    bool bindExtFunc(void** ptr, string funcName)
    {
        version (Windows)
        {
            *ptr = getAddress(toCString(funcName));
            debug
            {
                if(*ptr is null)
                    throw new SymbolLoadException("Failed to load OpenGL extension " ~ funcName);
            }
            return (*ptr !is null);
        }

        else
            assert(false, `"bindExtFunc"  is not implemented for this operating system.`);
    }

    version(DerelictGL_ARB)
    {
        GLExtensionState load_GL_ARB_multitexture()
        {
            if(!extIsSupported("GL_ARB_multitexture"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glActiveTextureARB, "glActiveTextureARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glClientActiveTextureARB, "glClientActiveTextureARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glMultiTexCoord1dARB, "glMultiTexCoord1dARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glMultiTexCoord1dvARB, "glMultiTexCoord1dvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glMultiTexCoord1fARB, "glMultiTexCoord1fARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glMultiTexCoord1fvARB, "glMultiTexCoord1fvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glMultiTexCoord1iARB, "glMultiTexCoord1iARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glMultiTexCoord1ivARB, "glMultiTexCoord1ivARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glMultiTexCoord1sARB, "glMultiTexCoord1sARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glMultiTexCoord1svARB, "glMultiTexCoord1svARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glMultiTexCoord2dARB, "glMultiTexCoord2dARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glMultiTexCoord2dvARB, "glMultiTexCoord2dvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glMultiTexCoord2fARB, "glMultiTexCoord2fARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glMultiTexCoord2fvARB, "glMultiTexCoord2fvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glMultiTexCoord2iARB, "glMultiTexCoord2iARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glMultiTexCoord2ivARB, "glMultiTexCoord2ivARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glMultiTexCoord2sARB, "glMultiTexCoord2sARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glMultiTexCoord2svARB, "glMultiTexCoord2svARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glMultiTexCoord3dARB, "glMultiTexCoord3dARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glMultiTexCoord3dvARB, "glMultiTexCoord3dvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glMultiTexCoord3fARB, "glMultiTexCoord3fARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glMultiTexCoord3fvARB, "glMultiTexCoord3fvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glMultiTexCoord3iARB, "glMultiTexCoord3iARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glMultiTexCoord3ivARB, "glMultiTexCoord3ivARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glMultiTexCoord3sARB, "glMultiTexCoord3sARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glMultiTexCoord3svARB, "glMultiTexCoord3svARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glMultiTexCoord4dARB, "glMultiTexCoord4dARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glMultiTexCoord4dvARB, "glMultiTexCoord4dvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glMultiTexCoord4fARB, "glMultiTexCoord4fARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glMultiTexCoord4fvARB, "glMultiTexCoord4fvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glMultiTexCoord4iARB, "glMultiTexCoord4iARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glMultiTexCoord4ivARB, "glMultiTexCoord4ivARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glMultiTexCoord4sARB, "glMultiTexCoord4sARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glMultiTexCoord4svARB, "glMultiTexCoord4svARB"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_transpose_matrix()
        {
            if(!extIsSupported("GL_ARB_transpose_matrix"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glLoadTransposeMatrixfARB, "glLoadTransposeMatrixfARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glLoadTransposeMatrixdARB, "glLoadTransposeMatrixdARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glMultTransposeMatrixfARB, "glMultTransposeMatrixfARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glMultTransposeMatrixdARB, "glMultTransposeMatrixdARB"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_multisample()
        {
            if(!extIsSupported("GL_ARB_multisample"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glSampleCoverageARB, "glSampleCoverageARB"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_texture_env_add()
        {
            if(!extIsSupported("GL_ARB_texture_env_add"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_texture_cube_map()
        {
            if(!extIsSupported("GL_ARB_texture_cube_map"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_texture_compression()
        {
            if(!extIsSupported("GL_ARB_texture_compression"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glCompressedTexImage3DARB, "glCompressedTexImage3DARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glCompressedTexImage2DARB, "glCompressedTexImage2DARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glCompressedTexImage1DARB, "glCompressedTexImage1DARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glCompressedTexSubImage3DARB, "glCompressedTexSubImage3DARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glCompressedTexSubImage2DARB, "glCompressedTexSubImage2DARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glCompressedTexSubImage1DARB, "glCompressedTexSubImage1DARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetCompressedTexImageARB, "glGetCompressedTexImageARB"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_texture_border_clamp()
        {
            if(!extIsSupported("GL_ARB_texture_border_clamp"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_point_parameters()
        {
            if(!extIsSupported("GL_ARB_point_parameters"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glPointParameterfARB, "glPointParameterfARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glPointParameterfvARB, "glPointParameterfvARB"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_vertex_blend()
        {
            if(!extIsSupported("GL_ARB_vertex_blend"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glWeightbvARB, "glWeightbvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glWeightsvARB, "glWeightsvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glWeightivARB, "glWeightivARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glWeightfvARB, "glWeightfvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glWeightdvARB, "glWeightdvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glWeightubvARB, "glMatrixIndexPointerARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glWeightusvARB, "glWeightusvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glWeightuivARB, "glWeightuivARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glWeightPointerARB, "glWeightPointerARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glVertexBlendARB, "glVertexBlendARB"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_matrix_palette()
        {
            if(!extIsSupported("GL_ARB_matrix_palette"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glCurrentPaletteMatrixARB, "glCurrentPaletteMatrixARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glMatrixIndexubvARB, "glMatrixIndexubvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glMatrixIndexusvARB, "glMatrixIndexusvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glMatrixIndexuivARB, "glMatrixIndexuivARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glMatrixIndexPointerARB, "glMatrixIndexPointerARB"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_texture_env_combine()
        {
            if(!extIsSupported("GL_ARB_texture_env_combine"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_texture_env_crossbar()
        {
            if(!extIsSupported("GL_ARB_texture_env_crossbar"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_texture_env_dot3()
        {
            if(!extIsSupported("GL_ARB_texture_env_dot3"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_texture_mirrored_repeat()
        {
            if(!extIsSupported("GL_ARB_texture_mirrored_repeat"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_depth_texture()
        {
            if(!extIsSupported("GL_ARB_depth_texture"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_shadow()
        {
            if(!extIsSupported("GL_ARB_shadow"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_shadow_ambient()
        {
            if(!extIsSupported("GL_ARB_shadow_ambient"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_window_pos()
        {
            if(!extIsSupported("GL_ARB_window_pos"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glWindowPos2dARB, "glWindowPos2dARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glWindowPos2dvARB, "glWindowPos2dvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glWindowPos2fARB, "glWindowPos2fARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glWindowPos2fvARB, "glWindowPos2fvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glWindowPos2iARB, "glWindowPos2iARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glWindowPos2ivARB, "glWindowPos2ivARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glWindowPos2sARB, "glWindowPos2sARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glWindowPos2svARB, "glWindowPos2svARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glWindowPos3dARB, "glWindowPos3dARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glWindowPos3dvARB, "glWindowPos3dvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glWindowPos3fARB, "glWindowPos3fARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glWindowPos3fvARB, "glWindowPos3fvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glWindowPos3iARB, "glWindowPos3iARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glWindowPos3ivARB, "glWindowPos3ivARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glWindowPos3sARB, "glWindowPos3sARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glWindowPos3svARB, "glWindowPos3svARB"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_vertex_program()
        {
            if(!extIsSupported("GL_ARB_vertex_program"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glVertexAttrib1dARB, "glVertexAttrib1dARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glVertexAttrib1dvARB, "glVertexAttrib1dvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glVertexAttrib1fARB, "glVertexAttrib1fARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glVertexAttrib1fvARB, "glVertexAttrib1fvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glVertexAttrib1sARB, "glVertexAttrib1sARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glVertexAttrib1svARB, "glVertexAttrib1svARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glVertexAttrib2dARB, "glVertexAttrib2dARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glVertexAttrib2dvARB, "glVertexAttrib2dvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glVertexAttrib2fARB, "glVertexAttrib2fARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glVertexAttrib2fvARB, "glVertexAttrib2fvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glVertexAttrib2sARB, "glVertexAttrib2sARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glVertexAttrib2svARB, "glVertexAttrib2svARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glVertexAttrib3dARB, "glVertexAttrib3dARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glVertexAttrib3dvARB, "glVertexAttrib3dvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glVertexAttrib3fARB, "glVertexAttrib3fARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glVertexAttrib3fvARB, "glVertexAttrib3fvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glVertexAttrib3sARB, "glVertexAttrib3sARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glVertexAttrib3svARB, "glVertexAttrib3svARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glVertexAttrib4NbvARB, "glVertexAttrib4NbvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glVertexAttrib4NivARB, "glVertexAttrib4NivARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glVertexAttrib4NsvARB, "glVertexAttrib4NsvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glVertexAttrib4NubARB, "glVertexAttrib4NubARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glVertexAttrib4NubvARB, "glVertexAttrib4NubvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glVertexAttrib4NuivARB, "glVertexAttrib4NuivARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glVertexAttrib4NusvARB, "glVertexAttrib4NusvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glVertexAttrib4bvARB, "glVertexAttrib4bvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glVertexAttrib4dARB, "glVertexAttrib4dARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glVertexAttrib4dvARB, "glVertexAttrib4dvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glVertexAttrib4fARB, "glVertexAttrib4fARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glVertexAttrib4fvARB, "glVertexAttrib4fvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glVertexAttrib4ivARB, "glVertexAttrib4ivARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glVertexAttrib4sARB, "glVertexAttrib4sARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glVertexAttrib4svARB, "glVertexAttrib4svARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glVertexAttrib4ubvARB, "glVertexAttrib4ubvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glVertexAttrib4uivARB, "glVertexAttrib4uivARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glVertexAttrib4usvARB, "glVertexAttrib4usvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glVertexAttribPointerARB, "glVertexAttribPointerARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glEnableVertexAttribArrayARB, "glEnableVertexAttribArrayARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glDisableVertexAttribArrayARB, "glDisableVertexAttribArrayARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glProgramStringARB, "glProgramStringARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glBindProgramARB, "glBindProgramARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glDeleteProgramsARB, "glDeleteProgramsARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGenProgramsARB, "glGenProgramsARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glProgramEnvParameter4dARB, "glProgramEnvParameter4dARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glProgramEnvParameter4dvARB, "glProgramEnvParameter4dvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glProgramEnvParameter4fARB, "glProgramEnvParameter4fARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glProgramEnvParameter4fvARB, "glProgramEnvParameter4fvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glProgramLocalParameter4dARB, "glProgramLocalParameter4dARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glProgramLocalParameter4dvARB, "glProgramLocalParameter4dvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glProgramLocalParameter4fARB, "glProgramLocalParameter4fARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glProgramLocalParameter4fvARB, "glProgramLocalParameter4fvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetProgramEnvParameterdvARB, "glGetProgramEnvParameterdvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetProgramEnvParameterfvARB, "glGetProgramEnvParameterfvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetProgramLocalParameterdvARB, "glGetProgramLocalParameterdvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetProgramLocalParameterfvARB, "glGetProgramLocalParameterfvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetProgramivARB, "glGetProgramivARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetProgramStringARB, "glGetProgramStringARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetVertexAttribdvARB, "glGetVertexAttribdvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetVertexAttribfvARB, "glGetVertexAttribfvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetVertexAttribivARB, "glGetVertexAttribivARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetVertexAttribPointervARB, "glGetVertexAttribPointervARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glIsProgramARB, "glIsProgramARB"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_fragment_program()
        {
            if(!extIsSupported("GL_ARB_fragment_program"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_vertex_buffer_object()
        {
            if(!extIsSupported("GL_ARB_vertex_buffer_object"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glBindBufferARB, "glBindBufferARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glDeleteBuffersARB, "glDeleteBuffersARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGenBuffersARB, "glGenBuffersARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glIsBufferARB, "glIsBufferARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glBufferDataARB, "glBufferDataARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glBufferSubDataARB, "glBufferSubDataARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetBufferSubDataARB, "glGetBufferSubDataARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glMapBufferARB, "glMapBufferARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glUnmapBufferARB, "glUnmapBufferARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetBufferParameterivARB, "glGetBufferParameterivARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetBufferPointervARB, "glGetBufferPointervARB"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_occlusion_query()
        {
            if(!extIsSupported("GL_ARB_occlusion_query"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glGenQueriesARB, "glGenQueriesARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glDeleteQueriesARB, "glDeleteQueriesARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glIsQueryARB, "glIsQueryARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glBeginQueryARB, "glBeginQueryARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glEndQueryARB, "glEndQueryARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetQueryivARB, "glGetQueryivARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetQueryObjectivARB, "glGetQueryObjectivARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetQueryObjectuivARB, "glGetQueryObjectuivARB"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_shader_objects()
        {
            if(!extIsSupported("GL_ARB_shader_objects"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glDeleteObjectARB, "glDeleteObjectARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetHandleARB, "glGetHandleARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glDetachObjectARB, "glDetachObjectARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glCreateShaderObjectARB, "glCreateShaderObjectARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glShaderSourceARB, "glShaderSourceARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glCompileShaderARB, "glCompileShaderARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glCreateProgramObjectARB, "glCreateProgramObjectARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glAttachObjectARB, "glAttachObjectARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glLinkProgramARB, "glLinkProgramARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glUseProgramObjectARB, "glUseProgramObjectARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glValidateProgramARB, "glValidateProgramARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glUniform1fARB, "glUniform1fARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glUniform2fARB, "glUniform2fARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glUniform3fARB, "glUniform3fARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glUniform4fARB, "glUniform4fARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glUniform1iARB, "glUniform1iARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glUniform2iARB, "glUniform2iARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glUniform3iARB, "glUniform3iARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glUniform4iARB, "glUniform4iARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glUniform1fvARB, "glUniform1fvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glUniform2fvARB, "glUniform2fvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glUniform3fvARB, "glUniform3fvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glUniform4fvARB, "glUniform4fvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glUniform1ivARB, "glUniform1ivARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glUniform2ivARB, "glUniform2ivARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glUniform3ivARB, "glUniform3ivARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glUniform4ivARB, "glUniform4ivARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glUniformMatrix2fvARB, "glUniformMatrix2fvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glUniformMatrix3fvARB, "glUniformMatrix3fvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glUniformMatrix4fvARB, "glUniformMatrix4fvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetObjectParameterfvARB, "glGetObjectParameterfvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetObjectParameterivARB, "glGetObjectParameterivARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetInfoLogARB, "glGetInfoLogARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetAttachedObjectsARB, "glGetAttachedObjectsARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetUniformLocationARB, "glGetUniformLocationARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetActiveUniformARB, "glGetActiveUniformARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetUniformfvARB, "glGetUniformfvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetUniformivARB, "glGetUniformivARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetShaderSourceARB, "glGetShaderSourceARB"))
                return GLExtensionState.FailedToLoad;

            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_vertex_shader()
        {
            if(!extIsSupported("GL_ARB_vertex_shader"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glBindAttribLocationARB, "glBindAttribLocationARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetActiveAttribARB, "glGetActiveAttribARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetAttribLocationARB, "glGetAttribLocationARB"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_fragment_shader()
        {
            if(!extIsSupported("GL_ARB_fragment_shader"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_shading_language_100()
        {
            if(!extIsSupported("GL_ARB_shading_language_100"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_texture_non_power_of_two()
        {
            if(!extIsSupported("GL_ARB_texture_non_power_of_two"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_point_sprite()
        {
            if(!extIsSupported("GL_ARB_point_sprite"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_fragment_program_shadow()
        {
            if(!extIsSupported("GL_ARB_fragment_program_shadow"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_draw_buffers()
        {
            if(!extIsSupported("GL_ARB_draw_buffers"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glDrawBuffersARB, "glDrawBuffersARB"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_texture_rectangle()
        {
            if(!extIsSupported("GL_ARB_texture_rectangle"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_color_buffer_float()
        {
            if(!extIsSupported("GL_ARB_color_buffer_float"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glClampColorARB, "glClampColorARB"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_half_float_pixel()
        {
            if(!extIsSupported("GL_ARB_half_float_pixel"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_texture_float()
        {
            if(!extIsSupported("GL_ARB_texture_float"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_pixel_buffer_object()
        {
            if(!extIsSupported("GL_ARB_pixel_buffer_object"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_depth_buffer_float()
        {
            if(!extIsSupported("GL_ARB_depth_buffer_float"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_draw_instanced()
        {
            if(!extIsSupported("GL_ARB_draw_instanced"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glDrawArraysInstancedARB, "glDrawArraysInstancedARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glDrawElementsInstancedARB, "glDrawElementsInstancedARB"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_framebuffer_object()
        {
            if(!extIsSupported("GL_ARB_framebuffer_object"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glIsRenderbuffer, "glIsRenderbuffer"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glBindRenderbuffer, "glBindRenderbuffer"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glDeleteRenderbuffers, "glDeleteRenderbuffers"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGenRenderbuffers, "glGenRenderbuffers"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glRenderbufferStorage, "glRenderbufferStorage"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glRenderbufferStorageMultisample, "glRenderbufferStorageMultisample"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetRenderbufferParameteriv, "glGetRenderbufferParameteriv"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glIsFramebuffer, "glIsFramebuffer"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glBindFramebuffer, "glBindFramebuffer"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glDeleteFramebuffers, "glDeleteFramebuffers"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGenFramebuffers, "glGenFramebuffers"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glCheckFramebufferStatus, "glCheckFramebufferStatus"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glFramebufferTexture1D, "glFramebufferTexture1D"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glFramebufferTexture2D, "glFramebufferTexture2D"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glFramebufferTexture3D, "glFramebufferTexture3D"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glFramebufferTextureLayer, "glFramebufferTextureLayer"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glFramebufferRenderbuffer, "glFramebufferRenderbuffer"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetFramebufferAttachmentParameteriv, "glGetFramebufferAttachmentParameteriv"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glBlitFramebuffer, "glBlitFramebuffer"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGenerateMipmap, "glGenerateMipmap"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_framebuffer_sRGB()
        {
            if(!extIsSupported("GL_ARB_framebuffer_sRGB"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_geometry_shader4()
        {
            if(!extIsSupported("GL_ARB_geometry_shader4"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glProgramParameteriARB, "glProgramParameteriARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glFramebufferTextureARB, "glFramebufferTextureARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glFramebufferTextureLayerARB, "glFramebufferTextureLayerARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glFramebufferTextureFaceARB, "glFramebufferTextureFaceARB"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_half_float_vertex()
        {
            if(!extIsSupported("GL_ARB_half_float_vertex"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_imaging()
        {
            if(!extIsSupported("GL_ARB_imaging"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glColorTable, "glColorTable"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glColorSubTable, "glColorSubTable"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glColorTableParameteriv, "glColorTableParameteriv"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glColorTableParameterfv, "glColorTableParameterfv"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glCopyColorSubTable, "glCopyColorSubTable"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glCopyColorTable, "glCopyColorTable"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetColorTable, "glGetColorTable"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetColorTableParameterfv, "glGetColorTableParameterfv"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetColorTableParameteriv, "glGetColorTableParameteriv"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glHistogram, "glHistogram"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glResetHistogram, "glResetHistogram"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetHistogram, "glGetHistogram"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetHistogramParameterfv, "glGetHistogramParameterfv"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetHistogramParameteriv, "glGetHistogramParameteriv"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glMinmax, "glMinmax"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glResetMinmax, "glResetMinmax"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetMinmax, "glGetMinmax"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetMinmaxParameterfv, "glGetMinmaxParameterfv"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetMinmaxParameteriv, "glGetMinmaxParameteriv"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glConvolutionFilter1D, "glConvolutionFilter1D"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glConvolutionFilter2D, "glConvolutionFilter2D"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glConvolutionParameterf, "glConvolutionParameterf"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glConvolutionParameterfv, "glConvolutionParameterfv"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glConvolutionParameteri, "glConvolutionParameteri"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glConvolutionParameteriv, "glConvolutionParameteriv"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glCopyConvolutionFilter1D, "glCopyConvolutionFilter1D"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glCopyConvolutionFilter2D, "glCopyConvolutionFilter2D"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetConvolutionFilter, "glGetConvolutionFilter"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetConvolutionParameterfv, "glGetConvolutionParameterfv"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetConvolutionParameteriv, "glGetConvolutionParameteriv"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glSeparableFilter2D, "glSeparableFilter2D"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetSeparableFilter, "glGetSeparableFilter"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_instanced_arrays()
        {
            if(!extIsSupported("GL_ARB_instanced_arrays"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glVertexAttribDivisorARB, "glVertexAttribDivisorARB"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_map_buffer_range()
        {
            if(!extIsSupported("GL_ARB_map_buffer_range"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glMapBufferRange, "glMapBufferRange"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glFlushMappedBufferRange, "glFlushMappedBufferRange"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_texture_buffer_object()
        {
            if(!extIsSupported("GL_ARB_texture_buffer_object"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glTexBufferARB, "glTexBufferARB"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_texture_compression_rgtc()
        {
            if(!extIsSupported("GL_ARB_texture_compression_rgtc"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_teture_rg()
        {
            if(!extIsSupported("GL_ARB_teture_rg"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_vertex_array_object()
        {
            if(!extIsSupported("GL_ARB_vertex_array_object"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glBindVertexArray, "glBindVertexArray"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glDeleteVertexArrays, "glDeleteVertexArrays"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGenVertexArrays, "glGenVertexArrays"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glIsVertexArray, "glIsVertexArray"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_ARB_uniform_buffer_object()
        {
            if(!extIsSupported("GL_ARB_uniform_buffer_object"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glGetUniformIndices, "glGetUniformIndices"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetActiveUniformsiv, "glGetActiveUniformsiv"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetActiveUniformName, "glGetActiveUniformName"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetUniformBlockIndex, "glGetUniformBlockIndex"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetActiveUniformBlockiv, "glGetActiveUniformBlockiv"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetActiveUniformBlockName, "glGetActiveUniformBlockName"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glUniformBlockBinding, "glUniformBlockBinding"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }
    }

    version(DerelictGL_EXT)
    {
        GLExtensionState load_GL_EXT_abgr()
        {
            if(!extIsSupported("GL_EXT_abgr"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_blend_color()
        {
            if(!extIsSupported("GL_EXT_blend_color"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glBlendColorEXT, "glBlendColorEXT"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_polygon_offset()
        {
            if(!extIsSupported("GL_EXT_polygon_offset"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glPolygonOffsetEXT, "glPolygonOffsetEXT"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_texture()
        {
            if(!extIsSupported("GL_EXT_texture"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glTexImage3DEXT, "glTexImage3DEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glTexSubImage3DEXT, "glTexSubImage3DEXT"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_texture3D()
        {
            if(!extIsSupported("GL_EXT_texture3D"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_subtexture()
        {
            if(!extIsSupported("GL_EXT_subtexture"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glTexSubImage1DEXT, "glTexSubImage1DEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glTexSubImage21DEXT, "glTexSubImage21DEXT"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_copy_texture()
        {
            if(!extIsSupported("GL_EXT_copy_texture"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glCopyTexImage1DEXT, "glCopyTexImage1DEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glCopyTexImage2DEXT, "glCopyTexImage2DEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glCopyTexSubImage1DEXT, "glCopyTexSubImage1DEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glCopyTexSubImage2DEXT, "glCopyTexSubImage2DEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glCopyTexSubImage3DEXT, "glCopyTexSubImage3DEXT"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_histogram()
        {
            if(!extIsSupported("GL_EXT_histogram"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glGetHistogramEXT, "glGetHistogramEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetHistogramParameterfvEXT, "glGetHistogramParameterfvEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetHistogramParameterivEXT, "glGetHistogramParameterivEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetMinmaxEXT, "glGetMinmaxEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetMinmaxParameterfvEXT, "glGetMinmaxParameterfvEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetMinmaxParameterivEXT, "glGetMinmaxParameterivEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glHistogramEXT, "glHistogramEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glMinmaxEXT, "glMinmaxEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glResetHistogramEXT, "glResetHistogramEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glResetMinmaxEXT, "glResetMinmaxEXT"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_convolution()
        {
            if(!extIsSupported("GL_EXT_convolution"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glConvolutionFilter1DEXT, "glConvolutionFilter1DEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glConvolutionFilter2DEXT, "glConvolutionFilter2DEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glConvolutionParameterfEXT, "glConvolutionParameterfEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glConvolutionParameterfvEXT, "glConvolutionParameterfvEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glConvolutionParameteriEXT, "glConvolutionParameteriEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glConvolutionParameterivEXT, "glConvolutionParameterivEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glCopyConvolutionFilter1DEXT, "glCopyConvolutionFilter1DEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glCopyConvolutionFilter2DEXT, "glCopyConvolutionFilter2DEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetConvolutionFilterEXT, "glGetConvolutionFilterEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetConvolutionParameterfvEXT, "glGetConvolutionParameterfvEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetConvolutionParameterivEXT, "glGetConvolutionParameterivEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetSeparableFilterEXT, "glGetSeparableFilterEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glSeparableFilter2DEXT, "glSeparableFilter2DEXT"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_cmyka()
        {
            if(!extIsSupported("GL_EXT_cmyka"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_texture_object()
        {
            if(!extIsSupported("GL_EXT_texture_object"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glAreTexturesResidentEXT, "glAreTexturesResidentEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glBindTextureEXT, "glBindTextureEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glDeleteTexturesEXT, "glDeleteTexturesEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGenTexturesEXT, "glGenTexturesEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glIsTextureEXT, "glIsTextureEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glPrioritizeTexturesEXT, "glPrioritizeTexturesEXT"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_packed_pixels()
        {
            if(!extIsSupported("GL_EXT_packed_pixels"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_rescale_normal()
        {
            if(!extIsSupported("GL_EXT_rescale_normal"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_vertex_array()
        {
            if(!extIsSupported("GL_EXT_vertex_array"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glArrayElementEXT, "glArrayElementEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glColorPointerEXT, "glColorPointerEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glDrawArraysEXT, "glDrawArraysEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glEdgeFlagPointerEXT, "glEdgeFlagPointerEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetPointervEXT, "glGetPointervEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glIndexPointerEXT, "glIndexPointerEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glDrawArraysEXT, "glDrawArraysEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glNormalPointerEXT, "glNormalPointerEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glTexCoordPointerEXT, "glTexCoordPointerEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glVertexPointerEXT, "glVertexPointerEXT"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_misc_attribute()
        {
            if(!extIsSupported("GL_EXT_misc_attribute"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_blend_minmax()
        {
            if(!extIsSupported("GL_EXT_blend_minmax"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glBlendEquationEXT, "glBlendEquationEXT"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_blend_subtract()
        {
            if(!extIsSupported("GL_EXT_blend_subtract"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_blend_logic_op()
        {
            if(!extIsSupported("GL_EXT_blend_logic_op"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_point_parameters()
        {
            if(!extIsSupported("GL_EXT_point_parameters"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glPointParameterfEXT, "glPointParameterfEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glPointParameterfvEXT, "glPointParameterfvEXT"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_color_subtable()
        {
            if(!extIsSupported("GL_EXT_color_subtable"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glColorSubTableEXT, "glColorSubTableEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glCopyColorSubTableEXT, "glCopyColorSubTableEXT"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_paletted_texture()
        {
            if(!extIsSupported("GL_EXT_paletted_texture"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glColorTableEXT, "glColorTableEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetColorTableEXT, "glGetColorTableEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetColorTableParameterivEXT, "glGetColorTableParameterivEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetColorTableParameterfvEXT, "glGetColorTableParameterfvEXT"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_clip_volume_hint()
        {
            if(!extIsSupported("GL_EXT_clip_volume_hint"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_index_texture()
        {
            if(!extIsSupported("GL_EXT_index_texture"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_index_material()
        {
            if(!extIsSupported("GL_EXT_index_material"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glIndexMaterialEXT, "glIndexMaterialEXT"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_index_func()
        {
            if(!extIsSupported("GL_EXT_index_func"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glIndexFuncEXT, "glIndexFuncEXT"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_index_array_formats()
        {
            if(!extIsSupported("GL_EXT_index_array_formats"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_compiled_vertex_array()
        {
            if(!extIsSupported("GL_EXT_compiled_vertex_array"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glLockArraysEXT, "glLockArraysEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glUnlockArraysEXT, "glUnlockArraysEXT"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_cull_vertex()
        {
            if(!extIsSupported("GL_EXT_cull_vertex"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glCullParameterdvEXT, "glCullParameterdvEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glCullParameterfvEXT, "glCullParameterfvEXT"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_draw_range_elements()
        {
            if(!extIsSupported("GL_EXT_draw_range_elements"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glDrawRangeElementsEXT, "glDrawRangeElementsEXT"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_light_texture()
        {
            if(!extIsSupported("GL_EXT_light_texture"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glApplyTextureEXT, "glApplyTextureEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glTextureLightEXT, "glTextureLightEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glTextureMaterialEXT, "glTextureMaterialEXT"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_bgra()
        {
            if(!extIsSupported("GL_EXT_bgra"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_pixel_transform()
        {
            if(!extIsSupported("GL_EXT_pixel_transform"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glPixelTransformParameteriEXT, "glPixelTransformParameteriEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glPixelTransformParameterfEXT, "glPixelTransformParameterfEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glPixelTransformParameterivEXT, "glPixelTransformParameterivEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glPixelTransformParameterfvEXT, "glPixelTransformParameterfvEXT"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_pixel_transform_color_table()
        {
            if(!extIsSupported("GL_EXT_pixel_transform_color_table"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_shared_texture_palette()
        {
            if(!extIsSupported("GL_EXT_shared_texture_palette"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_separate_specular_color()
        {
            if(!extIsSupported("GL_EXT_separate_specular_color"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_secondary_color()
        {
            if(!extIsSupported("GL_EXT_secondary_color"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glSecondaryColor3bEXT, "glSecondaryColor3bEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glSecondaryColor3bvEXT, "glSecondaryColor3bvEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glSecondaryColor3dEXT, "glSecondaryColor3dEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glSecondaryColor3dvEXT, "glSecondaryColor3dvEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glSecondaryColor3fEXT, "glSecondaryColor3fEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glSecondaryColor3fvEXT, "glSecondaryColor3fvEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glSecondaryColor3iEXT, "glSecondaryColor3iEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glSecondaryColor3ivEXT, "glSecondaryColor3ivEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glSecondaryColor3sEXT, "glSecondaryColor3sEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glSecondaryColor3svEXT, "glSecondaryColor3svEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glSecondaryColor3ubEXT, "glSecondaryColor3ubEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glSecondaryColor3ubvEXT, "glSecondaryColor3ubvEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glSecondaryColor3uiEXT, "glSecondaryColor3uiEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glSecondaryColor3uivEXT, "glSecondaryColor3uivEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glSecondaryColor3usEXT, "glSecondaryColor3usEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glSecondaryColor3usvEXT, "glSecondaryColor3usvEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glSecondaryColorPointerEXT, "glSecondaryColorPointerEXT"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_texture_perturb_normal()
        {
            if(!extIsSupported("GL_EXT_texture_perturb_normal"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glTextureNormalEXT, "glTextureNormalEXT"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_multi_draw_arrays()
        {
            if(!extIsSupported("GL_EXT_multi_draw_arrays"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glMultiDrawArraysEXT, "glMultiDrawArraysEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glMultiDrawElementsEXT, "glMultiDrawElementsEXT"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_fog_coord()
        {
            if(!extIsSupported("GL_EXT_fog_coord"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glFogCoordfEXT, "glFogCoordfEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glFogCoordfvEXT, "glFogCoordfvEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glFogCoorddEXT, "glFogCoorddEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glFogCoorddvEXT, "glFogCoorddvEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glFogCoordPointerEXT, "glFogCoordPointerEXT"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_coordinate_frame()
        {
            if(!extIsSupported("GL_EXT_coordinate_frame"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glTangent3bEXT, "glTangent3bEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glTangent3bvEXT, "glTangent3bvEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glTangent3dEXT, "glTangent3dEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glTangent3dvEXT, "glTangent3dvEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glTangent3fEXT, "glTangent3fEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glTangent3fvEXT, "glTangent3fvEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glTangent3iEXT, "glTangent3iEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glTangent3ivEXT, "glTangent3ivEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glTangent3sEXT, "glTangent3sEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glTangent3svEXT, "glTangent3svEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glBinormal3bEXT, "glBinormal3bEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glBinormal3bvEXT, "glBinormal3bvEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glBinormal3dEXT, "glBinormal3dEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glBinormal3dvEXT, "glBinormal3dvEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glBinormal3fEXT, "glBinormal3fEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glBinormal3fvEXT, "glBinormal3fvEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glBinormal3iEXT, "glBinormal3iEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glBinormal3ivEXT, "glBinormal3ivEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glBinormal3sEXT, "glBinormal3sEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glBinormal3svEXT, "glBinormal3svEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glTangentPointerEXT, "glTangentPointerEXT"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glBinormalPointerEXT, "glBinormalPointerEXT"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_blend_func_separate()
        {
            if(!extIsSupported("GL_EXT_blend_func_separate"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glBlendFuncSeparateEXT, "glBlendFuncSeparateEXT"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_texture_env_combine()
        {
            if(!extIsSupported("GL_EXT_texture_env_combine"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_stencil_wrap()
        {
            if(!extIsSupported("GL_EXT_stencil_wrap"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_422_pixels()
        {
            if(!extIsSupported("GL_EXT_422_pixels"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_texture_cube_map()
        {
            if(!extIsSupported("GL_EXT_texture_cube_map"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_texture_env_add()
        {
            if(!extIsSupported("GL_EXT_texture_env_add"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_texture_lod_bias()
        {
            if(!extIsSupported("GL_EXT_texture_lod_bias"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_EXT_texture_filter_anisotropic()
        {
            if(!extIsSupported("GL_EXT_texture_filter_anisotropic"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }
    }

    version(DerelictGL_NV)
    {
        GLExtensionState load_GL_NV_texgen_reflection()
        {
            if(!extIsSupported("GL_NV_texgen_reflection"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }
    }

    version(DerelictGL_ATI)
    {
    }

    version(DerelictGL_SGI)
    {
        GLExtensionState load_GL_SGI_color_matrix()
        {
            if(!extIsSupported("GL_SGI_color_matrix"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SGI_color_table()
        {
            if(!extIsSupported("GL_SGI_color_table"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glColorTableSGI, "glColorTableSGI"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glColorTableParameterfvSGI, "glColorTableParameterfvSGI"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glColorTableParameterivSGI, "glColorTableParameterivSGI"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glCopyColorTableSGI, "glCopyColorTableSGI"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetColorTableSGI, "glGetColorTableSGI"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetColorTableParameterfvSGI, "glGetColorTableParameterfvSGI"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetColorTableParameterivSGI, "glGetColorTableParameterivSGI"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SGI_texture_color_table()
        {
            if(!extIsSupported("GL_SGI_texture_color_table"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }
    }

    version(DerelictGL_SGIS)
    {
        GLExtensionState load_GL_SGIS_texture_filter4()
        {
            if(!extIsSupported("GL_SGIS_texture_filter4"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glGetTexFilterFuncSGIS, "glGetTexFilterFuncSGIS"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glTexFilterFuncSGIS, "glTexFilterFuncSGIS"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SGIS_pixel_texture()
        {
            if(!extIsSupported("GL_SGIS_pixel_texture"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glPixelTexGenParameteriSGIS, "glPixelTexGenParameteriSGIS"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glPixelTexGenParameterivSGIS, "glPixelTexGenParameterivSGIS"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glPixelTexGenParameterfSGIS, "glPixelTexGenParameterfSGIS"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glPixelTexGenParameterfvSGIS, "glPixelTexGenParameterfvSGIS"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetPixelTexGenParameterivSGIS, "glGetPixelTexGenParameterivSGIS"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetPixelTexGenParameterfvSGIS, "glGetPixelTexGenParameterfvSGIS"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SGIS_texture4D()
        {
            if(!extIsSupported("GL_SGIS_texture4D"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glTexImage4DSGIS, "glTexImage4DSGIS"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glTexSubImage4DSGIS, "glTexSubImage4DSGIS"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SGIS_detail_texture()
        {
            if(!extIsSupported("GL_SGIS_detail_texture"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glDetailTexFuncSGIS, "glDetailTexFuncSGIS"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetDetailTexFuncSGIS, "glGetDetailTexFuncSGIS"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SGIS_sharpen_texture()
        {
            if(!extIsSupported("GL_SGIS_sharpen_texture"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glSharpenTexFuncSGIS, "glSharpenTexFuncSGIS"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetSharpenTexFuncSGIS, "glGetSharpenTexFuncSGIS"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SGIS_texture_lod()
        {
            if(!extIsSupported("GL_SGIS_texture_lod"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SGIS_multisample()
        {
            if(!extIsSupported("GL_SGIS_multisample"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glSampleMaskSGIS, "glSampleMaskSGIS"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glSamplePatternSGIS, "glSamplePatternSGIS"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SGIS_generate_mipmap()
        {
            if(!extIsSupported("GL_SGIS_generate_mipmap"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SGIS_texture_edge_clamp()
        {
            if(!extIsSupported("GL_SGIS_texture_edge_clamp"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SGIS_texture_border_clamp()
        {
            if(!extIsSupported("GL_SGIS_texture_border_clamp"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SGIS_texture_select()
        {
            if(!extIsSupported("GL_SGIS_texture_select"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SGIS_point_parameters()
        {
            if(!extIsSupported("GL_SGIS_point_parameters"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glPointParameterfSGIS, "glPointParameterfSGIS"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glPointParameterfvSGIS, "glPointParameterfvSGIS"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SGIS_fog_function()
        {
            if(!extIsSupported("GL_SGIS_fog_function"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glFogFuncSGIS, "glFogFuncSGIS"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetFogFuncSGIS, "glGetFogFuncSGIS"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }
    }

    version(DerelictGL_SGIX)
    {
        GLExtensionState load_GL_SGIX_pixel_texture()
        {
            if(!extIsSupported("GL_SGIX_pixel_texture"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glPixelTexGenSGIX, "glPixelTexGenSGIX"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SGIX_clipmap()
        {
            if(!extIsSupported("GL_SGIX_clipmap"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SGIX_shadow()
        {
            if(!extIsSupported("GL_SGIX_shadow"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SGIX_interlace()
        {
            if(!extIsSupported("GL_SGIX_interlace"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SGIX_pixel_tiles()
        {
            if(!extIsSupported("GL_SGIX_pixel_tiles"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }


        GLExtensionState load_GL_SGIX_sprite()
        {
            if(!extIsSupported("GL_SGIX_sprite"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glSpriteParameterfSGIX, "glSpriteParameterfSGIX"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glSpriteParameterfvSGIX, "glSpriteParameterfvSGIX"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glSpriteParameteriSGIX, "glSpriteParameteriSGIX"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glSpriteParameterivSGIX, "glSpriteParameterivSGIX"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SGIX_texture_multi_buffer()
        {
            if(!extIsSupported("GL_SGIX_texture_multi_buffer"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SGIX_instruments()
        {
            if(!extIsSupported("GL_SGIX_instruments"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glGetInstrumentsSGIX, "glGetInstrumentsSGIX"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glInstrumentsBufferSGIX, "glInstrumentsBufferSGIX"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glPollInstrumentsSGIX, "glPollInstrumentsSGIX"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glReadInstrumentsSGIX, "glReadInstrumentsSGIX"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glStartInstrumentsSGIX, "glStartInstrumentsSGIX"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glStopInstrumentsSGIX, "glStopInstrumentsSGIX"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SGIX_texture_scale_bias()
        {
            if(!extIsSupported("GL_SGIX_texture_scale_bias"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SGIX_framezoom()
        {
            if(!extIsSupported("GL_SGIX_framezoom"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glFrameZoomSGIX, "glFrameZoomSGIX"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SGIX_tag_sample_buffer()
        {
            if(!extIsSupported("GL_SGIX_tag_sample_buffer"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glTagSampleBufferSGIX, "glTagSampleBufferSGIX"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SGIX_polynomial_ffd()
        {
            if(!extIsSupported("GL_SGIX_polynomial_ffd"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glDeformationMap3dSGIX, "glDeformationMap3dSGIX"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glDeformationMap3fSGIX, "glDeformationMap3fSGIX"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glDeformSGIX, "glDeformSGIX"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glLoadIdentityDeformationMapSGIX, "glLoadIdentityDeformationMapSGIX"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SGIX_reference_plane()
        {
            if(!extIsSupported("GL_SGIX_reference_plane"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glReferencePlaneSGIX, "glReferencePlaneSGIX"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SGIX_flush_raster()
        {
            if(!extIsSupported("GL_SGIX_flush_raster"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glFLushRasterSGIX, "glFLushRasterSGIX"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SGIX_depth_texture()
        {
            if(!extIsSupported("GL_SGIX_depth_texture"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SGIX_fog_offset()
        {
            if(!extIsSupported("GL_SGIX_fog_offset"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SGIX_texture_add_env()
        {
            if(!extIsSupported("GL_SGIX_texture_add_env"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SGIX_list_priority()
        {
            if(!extIsSupported("GL_SGIX_list_priority"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glGetListParameterfvSGIX, "glGetListParameterfvSGIX"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetListParameterivSGIX, "glGetListParameterivSGIX"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glListParameterfSGIX, "glListParameterfSGIX"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glListParameterfvSGIX, "glListParameterfvSGIX"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glListParameteriSGIX, "glListParameteriSGIX"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glListParameterivSGIX, "glListParameterivSGIX"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SGIX_ir_instrument1()
        {
            if(!extIsSupported("GL_SGIX_ir_instrument1"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SGIX_calligraphic_fragment()
        {
            if(!extIsSupported("GL_SGIX_calligraphic_fragment"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SGIX_texture_lod_bias()
        {
            if(!extIsSupported("GL_SGIX_texture_lod_bias"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SGIX_shadow_ambient()
        {
            if(!extIsSupported("GL_SGIX_shadow_ambient"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SGIX_ycrcb()
        {
            if(!extIsSupported("GL_SGIX_ycrcb"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SGIX_fragment_lighting()
        {
            if(!extIsSupported("GL_SGIX_fragment_lighting"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glFragmentColorMaterialSGIX, "glFragmentColorMaterialSGIX"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glFragmentLightfSGIX, "glFragmentLightfSGIX"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glFragmentLightfvSGIX, "glFragmentLightfvSGIX"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glFragmentLightiSGIX, "glFragmentLightiSGIX"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glFragmentLightivSGIX, "glFragmentLightivSGIX"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glFragmentLightModelfSGIX, "glFragmentLightModelfSGIX"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glFragmentLightModelfvSGIX, "glFragmentLightModelfvSGIX"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glFragmentLightModeliSGIX, "glFragmentLightModeliSGIX"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glFragmentLightModelivSGIX, "glFragmentLightModelivSGIX"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glFragmentMaterialfSGIX, "glFragmentMaterialfSGIX"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glFragmentMaterialfvSGIX, "glFragmentMaterialfvSGIX"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glFragmentMaterialiSGIX, "glFragmentMaterialiSGIX"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glFragmentMaterialivSGIX, "glFragmentMaterialivSGIX"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetFragmentLightfvSGIX, "glGetFragmentLightfvSGIX"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetFragmentLightivSGIX, "glGetFragmentLightivSGIX"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetFragmentMaterialfvSGIX, "glGetFragmentMaterialfvSGIX"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetFragmentMaterialivSGIX, "glGetFragmentMaterialivSGIX"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glLightEnviSGIX, "glLightEnviSGIX"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SGIX_blend_alpha_minmax()
        {
            if(!extIsSupported("GL_SGIX_blend_alpha_minmax"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SGIX_impact_pixel_texture()
        {
            if(!extIsSupported("GL_SGIX_impact_pixel_texture"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SGIX_async()
        {
            if(!extIsSupported("GL_SGIX_async"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glAsyncMarkerSGIX, "glAsyncMarkerSGIX"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glFinishAsyncSGIX, "glFinishAsyncSGIX"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glPollAsyncSGIX, "glPollAsyncSGIX"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGenAsyncMarkersSGIX, "glGenAsyncMarkersSGIX"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glDeleteAsyncMarkersSGIX, "glDeleteAsyncMarkersSGIX"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glIsAsyncMarkerSGIX, "glIsAsyncMarkerSGIX"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SGIX_async_pixel()
        {
            if(!extIsSupported("GL_SGIX_async_pixel"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SGIX_async_histogram()
        {
            if(!extIsSupported("GL_SGIX_async_histogram"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SGIX_fog_scale()
        {
            if(!extIsSupported("GL_SGIX_fog_scale"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }
    }

    version(DerelictGL_HP)
    {
        GLExtensionState load_GL_HP_image_transform()
        {
            if(!extIsSupported("GL_HP_image_transform"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glImageTransformParameteriHP, "glImageTransformParameteriHP"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glImageTransformParameterfHP, "glImageTransformParameterfHP"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glImageTransformParameterivHP, "glImageTransformParameterivHP"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glImageTransformParameterfvHP, "glImageTransformParameterfvHP"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetImageTransformParameterivHP, "glGetImageTransformParameterivHP"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGetImageTransformParameterfvHP, "glGetImageTransformParameterfvHP"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_HP_convolution_border_modes()
        {
            if(!extIsSupported("GL_HP_convolution_border_modes"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_HP_texture_lighting()
        {
            if(!extIsSupported("GL_HP_texture_lighting"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_HP_occlusion_test()
        {
            if(!extIsSupported("GL_HP_occlusion_test"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }
    }

    version(DerelictGL_PGI)
    {
        GLExtensionState load_GL_PGI_vertex_hints()
        {
            if(!extIsSupported("GL_PGI_vertex_hints"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_PGI_misc_hints()
        {
            if(!extIsSupported("GL_PGI_misc_hints"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glHintPGI, "glHintPGI"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }
    }

    version(DerelictGL_IBM)
    {
        GLExtensionState load_GL_IBM_rasterpos_clip()
        {
            if(!extIsSupported("GL_IBM_rasterpos_clip"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }
    }

    version(DerelictGL_WIN)
    {
        GLExtensionState load_GL_WIN_phong_shading()
        {
            if(!extIsSupported("GL_WIN_phong_shading"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_WIN_specular_fog()
        {
            if(!extIsSupported("GL_WIN_specular_fog"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }
    }

    version(DerelictGL_INTEL)
    {
        GLExtensionState load_GL_INTEL_parallel_arrays()
        {
            if(!extIsSupported("GL_INTEL_parallel_arrays"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glVertexPointervINTEL, "glVertexPointervINTEL"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glNormalPointervINTEL, "glNormalPointervINTEL"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glColorPointervINTEL, "glColorPointervINTEL"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glTexCoordPointervINTEL, "glTexCoordPointervINTEL"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }
    }

    version(DerelictGL_REND)
    {
        GLExtensionState load_GL_REND_screen_coordinates()
        {
            if(!extIsSupported("GL_REND_screen_coordinates"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }
    }

    version(DerelictGL_APPLE)
    {
        GLExtensionState load_GL_APPLE_specular_vector()
        {
            if(!extIsSupported("GL_APPLE_specular_vector"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_APPLE_transform_hint()
        {
            if(!extIsSupported("GL_APPLE_transform_hint"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }
    }

    version(DerelictGL_SUNX)
    {
        GLExtensionState load_GL_SUNX_constant_data()
        {
            if(!extIsSupported("GL_SUNX_constant_data"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glFinishTextureSUNX, "glFinishTextureSUNX"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }
    }

    version(DerelictGL_SUN)
    {
        GLExtensionState load_GL_SUN_global_alpha()
        {
            if(!extIsSupported("GL_SUN_global_alpha"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glGlobalAlphaFactorbSUN, "glGlobalAlphaFactorbSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGlobalAlphaFactorsSUN, "glGlobalAlphaFactorsSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGlobalAlphaFactoriSUN, "glGlobalAlphaFactoriSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGlobalAlphaFactorfSUN, "glGlobalAlphaFactorfSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGlobalAlphaFactordSUN, "glGlobalAlphaFactordSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGlobalAlphaFactorubSUN, "glGlobalAlphaFactorubSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGlobalAlphaFactorusSUN, "glGlobalAlphaFactorusSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glGlobalAlphaFactoruiSUN, "glGlobalAlphaFactoruiSUN"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SUN_triangle_list()
        {
            if(!extIsSupported("GL_SUN_triangle_list"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glReplacementCodeuiSUN, "glReplacementCodeuiSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glReplacementCodeusSUN, "glReplacementCodeusSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glReplacementCodeubSUN, "glReplacementCodeubSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glReplacementCodeuivSUN, "glReplacementCodeuivSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glReplacementCodeusvSUN, "glReplacementCodeusvSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glReplacementCodeubvSUN, "glReplacementCodeubvSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glReplacementCodePointerSUN, "glReplacementCodePointerSUN"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SUN_vertex()
        {
            if(!extIsSupported("GL_SUN_vertex"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&glColor4ubVertex2fSUN, "glColor4ubVertex2fSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glColor4ubVertex2fvSUN, "glColor4ubVertex2fvSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glColor4ubVertex3fSUN, "glColor4ubVertex3fSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glColor4ubVertex3fvSUN, "glColor4ubVertex3fvSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glColor3fVertex3fSUN, "glColor3fVertex3fSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glColor3fVertex3fvSUN, "glColor3fVertex3fvSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glNormal3fVertex3fSUN, "glNormal3fVertex3fSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glNormal3fVertex3fvSUN, "glNormal3fVertex3fvSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glColor4fNormal3fVertex3fSUN, "glColor4fNormal3fVertex3fSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glColor4fNormal3fVertex3fvSUN, "glColor4fNormal3fVertex3fvSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glTexCoord2fVertex3fSUN, "glTexCoord2fVertex3fSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glTexCoord2fVertex3fvSUN, "glTexCoord2fVertex3fvSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glTexCoord4fVertex4fSUN, "glTexCoord4fVertex4fSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glTexCoord4fVertex4fvSUN, "glTexCoord4fVertex4fvSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glTexCoord2fColor4ubVertex3fSUN, "glTexCoord2fColor4ubVertex3fSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glTexCoord2fColor4ubVertex3fvSUN, "glTexCoord2fColor4ubVertex3fvSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glTexCoord2fColor3fVertex3fSUN, "glTexCoord2fColor3fVertex3fSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glTexCoord2fColor3fVertex3fvSUN, "glTexCoord2fColor3fVertex3fvSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glTexCoord2fNormal3fVertex3fSUN, "glTexCoord2fNormal3fVertex3fSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glTexCoord2fNormal3fVertex3fvSUN, "glTexCoord2fNormal3fVertex3fvSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glTexCoord2fColor4fNormal3fVertex3fSUN, "glTexCoord2fColor4fNormal3fVertex3fSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glTexCoord2fColor4fNormal3fVertex3fvSUN, "glTexCoord2fColor4fNormal3fVertex3fvSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glTexCoord4fColor4fNormal3fVertex4fSUN, "glTexCoord4fColor4fNormal3fVertex4fSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glTexCoord4fColor4fNormal3fVertex4fvSUN, "glTexCoord4fColor4fNormal3fVertex4fvSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glReplacementCodeuiVertex3fSUN, "glReplacementCodeuiVertex3fSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glReplacementCodeuiVertex3fvSUN, "glReplacementCodeuiVertex3fvSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glReplacementCodeuiColor4ubVertex3fSUN, "glReplacementCodeuiColor4ubVertex3fSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glReplacementCodeuiColor4ubVertex3fvSUN, "glReplacementCodeuiColor4ubVertex3fvSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glReplacementCodeuiColor3fVertex3fSUN, "glReplacementCodeuiColor3fVertex3fSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glReplacementCodeuiColor3fVertex3fvSUN, "glReplacementCodeuiColor3fVertex3fvSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glReplacementCodeuiNormal3fVertex3fSUN, "glReplacementCodeuiNormal3fVertex3fSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glReplacementCodeuiNormal3fVertex3fvSUN, "glReplacementCodeuiNormal3fVertex3fvSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glReplacementCodeuiColor4fNormal3fVertex3fSUN, "glReplacementCodeuiColor4fNormal3fVertex3fSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glReplacementCodeuiColor4fNormal3fVertex3fvSUN, "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glReplacementCodeuiTexCoord2fVertex3fSUN, "glReplacementCodeuiTexCoord2fVertex3fSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glReplacementCodeuiTexCoord2fVertex3fvSUN, "glReplacementCodeuiTexCoord2fVertex3fvSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN, "glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN, "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN, "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN, "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_SUN_convolution_border_modes()
        {
            if(!extIsSupported("GL_SUN_convolution_border_modes"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }
    }

    version(DerelictGL_INGR)
    {
        GLExtensionState load_GL_INGR_color_clamp()
        {
            if(!extIsSupported("GL_INGR_color_clamp"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_GL_INGR_interlace_read()
        {
            if(!extIsSupported("GL_INGR_interlace_read"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }
    }

    version(Windows)
    {
        GLExtensionState load_WGL_ARB_extensions_string()
        {
            // don't bother checking for support, as it probably won't even be reported by the driver
            if(!bindExtFunc(cast(void**)&wglGetExtensionsStringARB, "wglGetExtensionsStringARB"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_WGL_ARB_buffer_region()
        {
            if(!extIsSupported("WGL_ARB_buffer_region"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&wglCreateBufferRegionARB, "wglCreateBufferRegionARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&wglDeleteBufferRegionARB, "wglDeleteBufferRegionARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&wglSaveBufferRegionARB, "wglSaveBufferRegionARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&wglRestoreBufferRegionARB, "wglRestoreBufferRegionARB"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_WGL_ARB_multisample()
        {
            if(!extIsSupported("WGL_ARB_multisample"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_WGL_ARB_pixel_format()
        {
            if(!extIsSupported("WGL_ARB_pixel_format"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&wglGetPixelFormatAttribivARB, "wglGetPixelFormatAttribivARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&wglGetPixelFormatAttribfvARB, "wglGetPixelFormatAttribfvARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&wglChoosePixelFormatARB, "wglChoosePixelFormatARB"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_WGL_ARB_make_current_read()
        {
            if(!extIsSupported("WGL_ARB_make_current_read"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&wglMakeContextCurrentARB, "wglMakeContextCurrentARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&wglGetCurrentReadDCARB, "wglGetCurrentReadDCARB"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_WGL_ARB_pbuffer()
        {
            if(!extIsSupported("WGL_ARB_pbuffer"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&wglGetPbufferDCARB, "wglGetPbufferDCARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&wglReleasePbufferDCARB, "wglReleasePbufferDCARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&wglDestroyPbufferARB, "wglDestroyPbufferARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&wglQueryPbufferARB, "wglQueryPbufferARB"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_WGL_ARB_render_texture()
        {
            if(!extIsSupported("WGL_ARB_render_texture"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&wglBindTexImageARB, "wglBindTexImageARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&wglReleaseTexImageARB, "wglReleaseTexImageARB"))
                return GLExtensionState.FailedToLoad;
            if(!bindExtFunc(cast(void**)&wglSetPbufferAttribARB, "wglSetPbufferAttribARB"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_WGL_ARB_pixel_format_float()
        {
            if(!extIsSupported("WGL_ARB_pixel_format_float"))
                return GLExtensionState.DriverUnsupported;
            return GLExtensionState.Loaded;
        }

        GLExtensionState load_WGL_ARB_create_context()
        {
            if(!extIsSupported("WGL_ARB_create_context"))
                return GLExtensionState.DriverUnsupported;
            if(!bindExtFunc(cast(void**)&wglCreateContextAttribsARB, "wglCreateContextAttribsARB"))
                return GLExtensionState.FailedToLoad;
            return GLExtensionState.Loaded;
        }

    }
}
